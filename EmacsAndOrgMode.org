#+startup: overview indent
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage{cite}
#+LATEX_HEADER: \usepackage{braket,cancel}
#+LATEX_HEADER: \usepackage[version=4]{mhchem}
#+LATEX_HEADER: \usepackage{color}

* Why Emacs?

- *Question:* Why Emacs?
- /Answer:/ Because _Org mode_.
- *Question:* Why Org mode?
- /Answer:/ Because [[https://youtu.be/fgizHHd7nOo][Org mode is awesome]]. This is a link to the John
  Kitchin video that got me hooked. But there's a video of a
  [[https://youtu.be/oJTwQvgfgMM][Google talk]] by Carsten Dominik, an Org mode author. 

Check out the videos above to discover just how powerful Org mode really is.

While the learning curve for using Emacs is very steep, Emacs is very powerful
because it is extensible. There are very good reasons for using Emacs
in Org mode to write this or other documents. Reasons include:
- Mark-up is easy and is supported in GitHub
- Org mode has export-to-LaTeX capabilities
- Org mode supports code blocks in numerous languages which are
  executable directly in Emacs.
- In Org mode, a document can be divided into sections which are
  easily expanded or collapsed. This allows for keeping vast
  collections of notes in a single document which are easily
  navigable.
- Other features of Org mode:
  - To-do lists
  - Tables are easy to create and can function as spreadsheets
  - Hyperlinks are easy to include

* Viewing This Document
This document was written using the Emacs in Org mode. It is best
viewed in Emacs Org mode. Of course, if you don't have Emacs Org mode
installed or set up just yet, view this document in GitHub. Then, as
soon as you can use Emacs, start viewing it in Emacs so that you can
have its full functionality. On GitHub, code-blocks don't render well,
output doesn't render well, and code blocks don't execute. In Emacs
Org mode, all that functionality is available to you.

* Obtaining Emacs

| Software          | Platforms         |
|-------------------+-------------------|
| [[http://aquamacs.org][Aquamacs]]          | Mac               |
|-------------------+-------------------|
| [[https://bitbucket.org/mituharu/emacs-mac/src/master/][Mitsuharu's Emacs]] | Mac               |
|-------------------+-------------------|
| [[https://www.gnu.org/savannah-checkouts/gnu/emacs/emacs.html][Gnu Emacs]]         | Windows/Mac/Linux |
|-------------------+-------------------|
| [[https://github.com/jkitchin/scimax][scimax]]            | Windows/Mac/Linux |
|-------------------+-------------------|
| [[https://www.spacemacs.org/][spacemacs]]         | Windows/Mac/Linux |

** Additional Notes

I'm a Mac user, so most of my insights here are gained on the Mac OS
X, which is fundamentally a form of UNIX. I try to generalize these
notes as much as possible.

Mac OS X comes with a version of Emacs installed, but as I first
started exploring Emacs, I found that the built-in version did not
support Org mode. Therefore, I favored Aquamacs, because it supported
Org mode and many of the other prerequisites for Org mode. I later
tried Mitsuaru's Emacs, but I found I liked the Mac functionalities of
Aquamacs much better, so I returned to Aquamacs.

spacemacs appears to not be an actual Emacs program, but rather just a
layer that introduces some nice custom preferences.


* Getting Started With Emacs

Step zero in getting started with Emacs is to take the built-in
tutorial. To do this, fire up your Emacs program, and then initiate
the tuorial using the keystroke =C-h t=. To use this keystroke, you
must first understand this fairly standard form for listing Emacs
keystrokes. I describe it below. Once you know how to do the
keystrokes, you will be in a good position to start the tutorial. Once
you complete the tutorial, you will have completed your first step in
the journey to being an Emacs master.

** Emacs Keystrokes
In the following keystrokes (or "Macros"), =C= denotes the =CONTROL=
(or =CTRL=) key, and =M= denotes the =META= key. The =META= key is no
longer present on many modern keyboards, so, often, =M= is obtained by
pressing the =ESC= key.

The keystroke =C-x= indicates that =CTRL= should be depressed while
the =x= key is pressed and released. After =x= is released, the
keystroke =C-x= is accomplished, and =CTRL= may also be released.

The keystroke =M-x= is similar to =C-x=, but using the =META= key. In
practice, I find that on a Mac, I must press *and release* the =ESC=
key *before* I press the =x= key. Upon the release of =x=, the
keystroke =M-x= is accomplished.

Now, if you haven't already done so, start the built-in Emacs
tutorial.

** Summary of Useful Emacs Commands and Keystrokes
Here, I will use the terms "command" and "keystroke" and "macro"
interchangably.

*** File Editing Commands
The following commands are useful when editing files.
|-----------+------------------------|
| Macro     | Action                 |
|-----------+------------------------|
| =C-x C-x= | Save buffer to file.   |
|-----------+------------------------|
| =C-x C-c= | Quit Emacs             |
|-----------+------------------------|
| =C-a=     | Go to begining of line |
|-----------+------------------------|
| =C-e=     | Go to end of line      |
|-----------+------------------------|
| =C-x C-u= | Undo previous command  |

* Extending Emacs: Lisp
The great power of Emacs is the fact that it is extensible. Emacs is
associated with its own programming language, Emacs Lisp.
Many extensions to Emacs are built on Lisp. Lisp is
short for LISt Processing, and at the core of the language syntax is
the manipulation/processing of lists. Ideally, you will not need to do
much Lisp programming; however, some extensions and customizations of
Emacs require modifying your Emacs preferences file by adding snippets
of Lisp code.

Your preferences file is a file of Lisp commands that is executed on
Emacs start-up. It may assign values to variables that will be used
throughout your Emacs session. If you change your preferences file,
you must close Emacs and then restart it for your modifications to
take effect.

** Finding Your Emacs Preferences File
   To customize Emacs, you'll often have to add code to your preferences
   file. This is a very important file, then, and you must be able to
   find it (not always easy!). When you first install Emacs, you may not
   even have a preferences file, so it may be up to you to create one.

   Typically, Emacs looks for the preferences file in several
   locations. I discuss some platform specifics below.

*** Find your User Preferences File using Emacs (easy!)
There are several nice/easy ways I found on StackExchange (see the
[[https://stackoverflow.com/questions/189490/where-can-i-find-my-emacs-file-for-emacs-running-on-windows][answer by gone/cruizh]]) to open your preferences file in Emacs. Try any
of these:
1. Find the value of the Emacs variable =user-init-file=. To find
   this, type =C-h v user-init-file= (followed by RETURN). If you see
   a =~= in the reported value, this is shorthand for your user HOME
   directory.
2. Open your preferences file directory by doing the following:
   1. =M-x eval-expression=, followed by RETURN
   2. =(find-file user-init-file)

This can be done on any platform, but some platform-specific notes are
provided below.

*** Windows
On Windows, [[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html][these instructions]] tell you where to look for your
preferences file, or where to put it if you have to make one. You may
initially use any text editor to create/edit your preferences
file. Later, if you become drunk with the power of Emacs, you may want
to use only Emacs to edit it, and that is just fine.

**** Finding your User Preferences File using the File Explorer GUI
_Warning_. On Windows, you must beware of hidden file extensions. For
example, you may create a preferences file =init.el= or
=Preferences.el= and then save it in an appropriate place. If Emacs is
unable to locate your file even when it is rightly located, it may be
because whatever Windows text editor you are using has appended a file
extension =*.txt= so that Windows "knows" it's a text file. In this
case, Emacs cannot find the preferences file it is seeking, because it
doesn't exist! To fix this, you can make Windows show hidden file
extensions. Once you have done this, you can use the Explorer to
naviate to the file and remove the =*.txt= extension. Then, start or
restart Emacs, and it should find the rightly-named and rightly-placed
start-up file.

*** Mac
Often, the Emacs start-up file is your =~/.emacs= file. On Aquamacs,
it is typically the
=~/Library/Preferences/Aquamacs Emacs/Preferences.el= file. In the
Mitsuharu version of Emacs on MacPorts, it creates a =~/.emacs.d/=
directory, and I am able to choose whether I want to establish my
preferences in =~/.emacs=, =~/.emacs.el=, or =~/.emacs.d/init.el=. A
good  source of information on initialization/customization is the
Emacs manual section on the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][Emacs Initialization File]].

*** UNIX/Linux
The instructions here are the same as Mac, for the Mac OS is built on
a UNIX system.

** Learning More about Lisp
There are some canonical sources from which you can learn about Lisp:
- [[https://www.gnu.org/software/emacs/manual/html_node/eintr/]["An Introduction to Programming in Emacs Lisp"]] is distributed with
  Emacs version 26.3. This document is verbose but conversational. I
  read the first two or three chapters in [[https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf][PDF]] form, and with my background in
  programming, I found the confidence to understand the basics of the
  preferences file or to learn more as necessary.
- [[https://www.gnu.org/software/emacs/manual/pdf/elisp.pdf]["GNU Emacs List Reference Manual"]] is probably a more concise manual
  than the previous listed item. I haven't read it yet!

Useful keystrokes:
|-----------+----------------------------------------|
| =C-x C-e= | Evaluate list (cursor at end of list). |
|-----------+----------------------------------------|

** Emacs Lisp Basics

*** Basic Lists
- A list in Lisp is delimited by parentheses, =(= and =)=
  - A list is populated with elements called /atoms/.
  - Atoms in a list are separated using whitespace, and no whitespace
    is needed between an atom and a parenthesis
  - Atoms may be letters, numbers, strings, or even other lists
- The simplest list possible has no atoms: =()=.
- A list can provide a Lisp /function/
  - A function can be /evaluated/ (executed) by placing the cursor at
    the end of the list and typing =C-x C-e=
  - A non-function list is formed by typing an apostrophe (='=) just
    before the open parenthesis, i.e., ='( ... )=
    - The apostrophe is called a /quote/, so such a list is a /quoted/ list
- A single quote (='=) tells the Lisp interpeter to return the
  following expression as written, and not to evaluate it as a
  function or variable
- Strings are formed using double quotes (="..."=)

This function has three atoms:
#+name: lst-function-00
(+ 2 2)
To evaluate it, place the cursor just after the closing parenthesis
and then type =C-x C-e=. If you evaluate it, you'll see the an
output in the minibuffer that looks like this:
#+begin_verbatim text
4 (#o4, #x4, ?\C-d)
#+end_verbatim
The instruction given here was an addition operation with an augend of
2 and an addend of 2. The output is given as 4 in decimal, as well as
in octal and in hexadecimal.

The position of the cursor is important. If you place the cursor after
either of the "2" symbols in the list, you'll see "2" in the
minibuffer upon evaluating (=C-x C-e=. If you place the cursor after
the end of the list, you'll evaluate the entire function.

Here is an example of a non-functional list:
'(this is a non-functional list)
If you evaluate it, it just gets echoed to the minibuffer. This
non-functional list is a /quoted/ list.

Here is an example of a nested list:
(+ 2 (+ 3 4))

In this example, we use the =concat= function to join two strings:
(concat "cat" "dog")

*** Function Syntax

The basic syntax for a Lisp function is:
#+begin_verbatim
(symbol atom2 atom3 ...)
#+end_verbatim
Here, the first atom is =symbol=, some atom that specifies how the
rest of the list is to be processed. In list [[lst-function-00]], we used
"+" as the symbol, so we got an addition operation.

A symbol can be a function definition with a set of instructions, as
in the case of "+"; or it can be a variable, with a value assigned to
it. A symbol may also have both a function and a value.

*** The =message= function
The =message= function can be used to echo a string to the minibuffer:
(message "hello world")

If we wish to also export a numerical value using =message=, we can
use the =number-to-string= function:
(message (concat "My favorite number is " (number-to-string 7)))

A more concise way to do it is to use a formatted string, which as
placehoders for follow-on arguments:
(message "My favorite number is %d" 7)
Here, =%d= is a placeholder for the integer 7.

Similarly, =%s= can be a placeholder for a string:
(message "His name is %s." "Sargon")

*** Variables and the =set= function
The value of a variable may be set using the =set=, =setq= or =let=
functions.

To declare a variable, we define a symbol using an apostrophe:
='variable=

Thus to declare a variable =x= and assign its value, I can use
(set 'x 2)
I can then use the variable in another operation:
(message "The value of x is: %d" x)

*** Variables and the =setq= function

When learning to set Emacs preferences, =setq= is ubiquitous in
StackExchange posts. When using the =set= function, we typcially quote
the second atom,  which declares a symbol to hold a value. The =setq=
function is similar, but it allows you to set a value without quoting
the second atom. In fact, the =q= in =setq= stands for "quote". Therefore,
(setq y 3)
is equivalent to 
(set 'y 3)

We can use =setq= to define several variables in one list:
(setq a "hello" b "world")

* Extending Emacs: Org Mode

** Introduction to Org Mode
[[https://orgmode.org][Org mode]] is a powerful extension for Emacs which has been called ``the
scientist's note-taking system.'' Org mode enables many capabilties,
which include--but are not limited to:
- the taking of extsive, structured notes with support for
  - Itemized and enumerated lists and outlines
  - tables
- links
  - hyperlinks to Internet resources
  - internal links to sections, figures, tables, code blocks, etc.
- text markup
- significant LaTeX support, including:
  - math typesetting
  - export-to-LaTeX
  - references and bibliographies using bibTeX via the =org-ref=
    package (and other packages)
- embedding _executable_ code in documents in code blocks, with
  syntax highlighting for numerous documents 
- =*.org= document rendering on GitHub

One of the best introductions to Org mode--- and the one that got me
hooked--- is John Kitchin's [[https://youtu.be/fgizHHd7nOo][video]]. There's also a very famous [[https://youtu.be/oJTwQvgfgMM][Google
talk]] by Carsten Dominik, the author of Org mode.

** Summary of Useful Org Mode Commands and Keystrokes

The following useful commands are unique to Org mode.

*** Code Blocks

| Macro           | Action                     |
|-----------------+----------------------------|
| =C-c C-c=       | Execute code block         |
|-----------------+----------------------------|
| =C-c C-v t=     | Tangle all code blocks     |
|-----------------+----------------------------|
| =C-u C-c C-v t= | Tangle a single code block |
|                 |                            |


*** LaTeX Export Commands

| Macro         | Action                    |
|---------------+---------------------------|
| =C-c C-e l l= | Export to LaTeX document. |
|---------------+---------------------------|
| =C-c C-x C-l= | Render LaTeX equations.   |


*** Navigation

| Macro     | Action                            |
|-----------+-----------------------------------|
| =M-v=     | Page up                           |
|-----------+-----------------------------------|
| =C-v=     | Page down                         |
|-----------+-----------------------------------|
| =C-x C-o= | Open link (file, hyperlink, etc.) |
|           |                                   |

*** Outlines and Lists

Outline items are defined by starting a line with asterisks (=*=). The
number of asterisks determines the level of the outline item, as
follows:

|---------------------+-----------------------------------------------|
| Macro               | Action                                        |
|---------------------+-----------------------------------------------|
| =M+RET=             | Insert a new heading, item or row.            |
|---------------------+-----------------------------------------------|
| =OPT+RET=           | Insert a new heading, item or row. (Aquamacs) |
|---------------------+-----------------------------------------------|
| =OPT+(left arrow)=  | Promote outline/list item. (Aquamacs)         |
|---------------------+-----------------------------------------------|
| =OPT+(right arrow)= | Demote outline/list item. (Aquamacs)          |
|                     |                                               |


* Code Blocks in Org Mode

Code blocks may be:
- executed in org documents
  - Key bindings: =C-c C-c=
- written to the file system using =org-babel-tangle=. The Org-mode
  manual has [[https://orgmode.org/manual/Extracting-Source-Code.html][instructions on tangling code]].
  A code block can be tangled (written to the file system) if the
  first line includes the =:tangle= instruction. An example of	this
  might be: 

  #+BEGIN_VERBATIM
  #+BEGIN_SRC language :tangle filename
  < source code >
  #+END_SRC
  #+END_VERBATIM
  
  Then, the =org-babel-tangle= command may be invoked using =C-u C-c
  C-v t= (tangle a single code block) or =C-c C-v t= (tangle all code blocks).

** Python in Org Mode

*** Setup

To enable executable Python code blocks in emacs, I added the
following to my =Preferences.el= file:
#+NAME: code-preferences-include-python
#+BEGIN_SRC elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))

(setq org-babel-python-command "/Users/blair/anaconda3/bin/python3")
#+END_SRC

This code snippet serves two functions:
1. It adds code block support for Python
2. It specifies the path to the specific installation of Python which
   we desire to use.
   1. This is done using the =(setq ...= function
   2. The =(setq ...= function may not be necessary in Windows. If you
      would like to remove it easily, you can comment it out by
      prepending two semicolons: =;; (setq org-...=. This will turn
      everything that follows the semicolons into a comment.

*** Pythonic Hello World

This is an example of a basic Python script executed in Org mode:
#+begin_src python :results output
print('hello world')
#+end_src

#+RESULTS:
: hello world

*** Pythonic Hello World (tangled)

Now, I make a code block that can be tangled:
#+NAME: tangle-python-hello-world
#+BEGIN_SRC python :tangle hello_world_tangle.py
print("hello world. tangled.")
#+END_SRC

This exports the code to a file called =hello_world_tangle.py=. To run
the tangled file, a shell-script ('sh') code block like this may be
used:
#+NAME: run-tangled-python-script
#+BEGIN_SRC sh
python hello_world_tangle.py
#+END_SRC
Note: this works just fine on kodiak, but it doesn't work on my
Mac. On my Mac, I get =Symbol's function definition is void: org-babel-get-header=

To use a script like ref:run-tangled-python-script, something like the
following should be included in your preferences file:
#+BEGIN_SRC elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (sh . t)))
#+END_SRC
This adds support for shell scripts in the code block.


*** Troubleshooting

**** Code blocks do not evaluate
I had an issue where I would try to evaluate code blocks, and then
Emacs would tell me something like "Evaluation of this python code
block is disabled." I then found a [[https://www.reddit.com/r/emacs/comments/820ny1/code_block_eval_disabled/][reddit discussion]] telling me that
if I go to the org-mode package folder and delete any compiled Lisp
files (*.elc) and restart Aquaemacs, I can once again evaluate code
blocks. 

**** Python Code Blocks always return ": None" in the output
It is helpful to add =:results output= in the first line of the code
block. A [[https://emacs.stackexchange.com/questions/17926/python-org-mode-source-block-output-is-always-none][StackExchange discussion]] exists on this topic.

** MATLAB in Org Mode

I actually don't recommend this. I tried it on my Mac, and it didn't
go well. This procedure changed the text editor for MATLAB on my
Mac. Then, when I wanted to use MATLAB on my Mac, MATLAB threw an
error saying it could not find my text editor. I had to reset the text
editor to the default so that I could edit scripts in MATLAB once
again.

If you must use MATLAB code blocs in Emacs Org mode, then read on.
 
My source here are:
1. [[http://gewhere.github.io/blog/2017/12/19/setup-matlab-in-emacs-and-babel-orgmode/][Georgios Diapoulis' blog]]
2. A [[https://sourceforge.net/p/matlab-emacs/mailman/message/36089463/][SourceForge post]] by Cumhur Erkut

*** Setup
Step zero is to have a valid, licensed installation of MATLAB. To set
up MATLAB with Emacs, do the following: 
1. Install the =matlab-mode= package for Emacs using =M-x
   package-install= followed by ENTER, followed by =matlab-mode=
2. Create an Emacs wrapper for MATLAB.
   1. The following code block defines an Emacs wrapper for
      MATLAB. It's customized for my computer, so you should customize
      the path to your MATLAB program and tangle it to your file space
      as you see fit: 
      #+begin_src sh :tangle ~/matlab_emacs_wrapper :shebang "#!/bin/bash" :padline no
      # https://ch.mathworks.com/matlabcentral/answers/319655-why-does-matlab-r2016b-crash-when-launched-from-matlab-emacs?
      shell_stack_size=$(ulimit -s)
      
      adjusted_stack_size=$[4*((($shell_stack_size-1)/4)+1)]
      
      ulimit -s $adjusted_stack_size && /Applications/MATLAB_R2020a.app/bin/matlab $@
      #+end_src
      Note:
      1. If I tangle this to the file system, Emacs recognizes that it
         has a shebang and makes it executable
      2. If I copy and paste this into the file system, then I need to
         make it executable by typing in the command line
         #+BEGIN_SRC sh
         chmod 755 ~/matlab_emacs_wrapper
         #+END_SRC
   2. Diapoulis recommends running the script to see if you can
      make MATLAB run properly. Notes:
      1. The script ran from the command prompt for me
      2. The script did not run from an Emacs code block
3. Add the following to your Emacs preferences file:
   1. Define the =matlab-shell= command
      #+begin_verbatim elisp
      ;; establish/customize the matlab-shell command
      (setq matlab-shell-command "/Applications/MATLAB_R2020a.app/matlab")
      (customize-set-variable 'matlab-shell-command
      "~/matlab_emacs_wrapper")
      #+end_verbatim
   2. Load =org-babel= support for MATLAB by adding =(matlab . t)= to
      your =org-babel-do-load-languages= statement. Since I want
      support for Python, shell and MATLAB, my statement looks like this:
      #+begin_verbatim elisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t)
         (sh . t)
         (matlab . t)))
      #+end_verbatim
4. Save and close all Emacs work and restart Emacs. This will load
   your new preferences.
5. Upon restarting, if you set things up properly, 

*** Testing

 #+BEGIN_SRC matlab
 %% Here is a MATLAB region
 disp('hello world')
 %% Numerical result
 x = 5; % output supressed
 y = 7 % output not suppressed
 z = x+y % output not suppressed
 #+END_SRC

 #+RESULTS:
 #+begin_example
 < M A T L A B (R) >
                   Copyright 1984-2020 The MathWorks, Inc.
                    R2020a (9.8.0.1323502) 64-bit (maci64)
                              February 25, 2020

 
 To get started, type doc.
 For product information, visit www.mathworks.com.
 
 %>> % Here is a MATLAB region
 disp('hello world')
 hello world
 %% Numerical result
 x = 5; % output supressed
 y = 7 % output not suppressed

 y =

      7
 z = x+y % output not suppressed

 z =

     12
 'org_babel_eoe'

 ans =

     'org_babel_eoe'
 #+end_example



 This doesn't work for me. I get an error saying, "Autoloading failed
 to define function matlab-shell"
* Extending Emacs Org mode: Org-ref

** Introduction to =org-ref=
=org-ref= is a powerfully-helpful package for creating and managing
references in =org-mode=, with support for LaTeX export. Perhaps the
best introduction to =org-ref= is in the form of John Kitchin's [[https://youtu.be/2t925KRBbFc][video]].

** Installing =org-ref=
Org-ref may be installed easily by (1) typing =M-x package-install= and
then (2) specifiying =org-ref=. You may be required to perform an
intervening safety/security step between (1) and (2) of confirming
that you allow Emacs to communicate with the outside world by typing
=Always=.

Once =org-ref= is installed, you may need to make sure it's "required"
in your Emacs start-up file.

To get =org-ref= to work properly, I had to add
#+BEGIN_SRC elisp
(require 'org-ref)
#+END_SRC
to my preferences file.

Additionally, =helm-bibtex= is a useful part of =org-ref=, so I found
it helpful to also add to my preferences file:
#+BEGIN_SRC elisp
(require 'helm-bibtex)
#+END_SRC



* LaTeX Export using Org Mode
One of the reasons I like Org mode is that it allows LaTeX
export. With a few physical keystrokes (=C-c C-e l l=), I can export my notes to a
LaTeX document. I can also set up Emacs to export and view the
document (=C-c C-e l o=), but I haven't got that one working yet (I
need to set this up so that my LaTeX program performs the right number
of LaTeX compiles and BibTeX compiles).

** Adjustments to the Preamble
Here, I discuss using Org mode commands to set LaTeX documentclass
options/properties and set commands in the preamble.

*** Document Options

The title may be set using
#+begin_verbatim text
#+title: Some Title
#+end_verbatim

Sometimes, under LaTeX export, it is desirable to suppress document
features such as the author name, date, or the table of contents. This
may be done by setting the following options:
#+begin_verbatim
#+options: author:nil title:nil date:nil
#+end_verbatim

*** Modifying the LaTeX Preamble
All LaTeX documents have a preamble, which is content between the
=\documentclass{...}= command and the =\begin{document}= command. This
is where much cusomization is implemented.

Lines may be added to the preamble by using
#+BEGIN_SRC latex
#+LATEX_HEADER: ...
#+END_SRC
where =...= is a placeholder for a line of LaTeX preamble content.

**** Adding Packages
To add special capabilities beyond standard LaTeX, we can add
packages. This is done in the preamble by adding a line with the
=\usepackage{}= command.

Some packages I find useful:

| Package    | Description                                        |
|------------+----------------------------------------------------|
| =braket=   | Supports Dirac braket notation.                    |
|------------+----------------------------------------------------|
| =geometry= | Allows easy customization of layout (esp. margins) |
|------------+----------------------------------------------------|
| =mhchem=   | Supports chemical equations and formulas           |

For Org mode LaTeX export, use the =#+LATEX_HEADER:= directive, and
then add the desired preamble line.

For example, I might add the following to an
Org mode document:

#+BEGIN_SRC
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage[version=4]{mhchem}
#+LATEX_HEADER: \usepackage{braket}
#+END_SRC

*** Adding a Page Break after the TOC
When using the =\documentclass{article}=, the default is for the
secions of content to immediately follow the table of contents (TOC)
without an intervening page break. A StackExchange thread discusses
how to [[https://emacs.stackexchange.com/questions/42558/org-mode-export-force-page-break-after-toc][add a page break]] after the TOC.

To do this, we add the following to our Emacs preference file:
#+BEGIN_SRC lisp
(setq org-latex-toc-command "\\tableofcontents \\clearpage")
#+END_SRC



*** Beamer
Beamer is a LaTeX class for presentations. The org-mode reference has
a section on beamer, but there also is a nice page on orgmode.org
titled "[[https://orgmode.org/worg/exporters/beamer/ox-beamer.html][Beamer presentations using the new export engine]]".

* Illustrations in Org mode

** TikZ and Org mode
We can make plots in MATLAB or Python using code blocks. Another
option is to use TikZ. TikZ is a package for LaTeX and has become my
favourite illustrating system (so much so that I use the British
spelling of /favorite/). I learned from a blogger (I learned
after my use of /favourite/ that the blogger is British) that we can
[[https://www.homepages.ucl.ac.uk/~ucahjde/blog/tikz.html][make LaTeX code blocks that produce TikZ graphics]].

Note: this didn't work well for me, since my LaTeX installation
doesn't have imagemagik. This is a vital component for converting TikZ
output (pdf) to another format (png, jpg, etc.). Org mode doesn't
render PDF in the buffer well. It usually ends up as text for me.

Still, TikZ is important for me, since I use it to make scalable
vector graphics (SVG) for illustrations. I also use it to make
composite images/illustrations. If you have imagemagik installed, read
on, and you may be able to find success where I have not.

An alternate method for using Org mode to generate TikZ illustrations
is in the next section, so you may wish to skip the rest of this
section.

*** Setup
The blog post or a search leads us to the Org manual page on
[[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-LaTeX.html][LaTeX code blocks]]. To set up LaTeX code blocks, we perform the
following: 
1. Point Emacs to the LaTeX executable by adding this to my
   preferences file:
   #+begin_verbatim elisp
   ;; point Emacs to latex on my Mac
   (setq exec-path (append exec-path '("/Library/TeX/texbin")))
   #+end_verbatim
2. Enable =org-babel= support for LaTeX. To do this, we add ='((latex
   . t))= to our Emacs preferences file within the
   =org-babel-do-load-languages= command. Thus, to support Python,
   shell, and LaTeX, I have the following in my preferences file:
   #+begin_verbatim elisp
   ;; Adds support for executable Python code blocks
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)
      (sh . t)
      (latex . t)))
   #+end_verbatim
3. Install the =auctex= package
   1. Use =M-x package-install= followed by =acutex=.
   2. Add =(load "auctex.el" nil t t)= to my preferences file.

*** Examples
These examples need some work. They produce the following:
- An SVG that doesn't render as an image in Org mode
  - Maybe I can set up Org mode to render SVG
- A PDF with a crazy hashed name, and not in the destination I
  want. The PDF doesn't render in Org mode, but rather gets displayed
  in Adobe Acrobat.

This first example produces a =*.svg= file. Copying - with a
few adaptations - from the blog post, I have:
#+HEADER: :file img/contour.svg :imagemagick yes
#+HEADER: :results output silent :headers '("\\usepackage{tikz}")
#+HEADER: :fit yes :imoutoptions -geometry 400 :iminoptions -density 600
#+BEGIN_src latex
\begin{tikzpicture}
\draw[->] (-3,0) -- (-2,0) arc[radius=0.5cm,start angle=-180,end angle=0] (-1,0) -- (1,0) arc[radius=0.5cm,start angle=180,end angle=0] (2,0) -- (3,0);
\filldraw (-1.5,0) circle[radius=1mm];
\filldraw (1.5,0) circle[radius=1mm];
\end{tikzpicture}
#+END_src


Unfortunately, I didn't get the SVG to render well in Org mode. It
probably would render well - as intended - in the blogger's html
result.

The [[https://emacs.stackexchange.com/questions/20488/how-do-i-create-a-floating-tikz-figure-when-exporting-to-pdf-in-org-mode][next example]] comes from StackExchange and produces a pdf:
#+HEADER: :file img/fsa.pdf
#+HEADER: :results raw silent :headers '("\\usepackage{tikz}")
#+begin_src latex :border 1em
  % Define block styles
  \usetikzlibrary{shapes,arrows}
  \tikzstyle{astate} = [circle, draw, text centered, font=\footnotesize, fill=blue!25]
  \tikzstyle{rstate} = [circle, draw, text centered, font=\footnotesize, fill=red!25]

  \begin{tikzpicture}[->,>=stealth', shorten >=1pt, auto, node distance=2.8cm, semithick]
    \node [astate] (1) at (0,0) {1};
    \node [astate] (2) at (1,0) {2};
    \node [rstate] (3) at (2,0) {3};
    \path (1) edge [bend left] node {b} (2)
          (2) edge node {b} (3)
          (2) edge [bend left] node {a} (1)
          (3) edge [loop above] node {(a, b)} (3);
  \end{tikzpicture}
#+end_src
The problem here is that it doesn't produce the result in the right
place, nor does it provide the right file name. I had to manually copy
the result from the present directory (containing this Org file) to
the destination directory. Additionally, the file had some hashed
name, so I renamed it to the desired name.

#+RESULTS:

To display the PDF result here, we use:

#+CAPTION: tikz caption
#+LABEL: fig:tikz
#+RESULTS:
# ()convertfrompdf:t
[[./img/fsa.png]]
The other problem is that this link opens in Adobe Acrobat, and not in
an Emacs buffer.

Check to see if imagemagick is installed:
(executable-find "convert") - this returns "nil"
(image-type-available-p 'imagemagick)
I also tried exporting to =eps=, but that didn't work so well.

#+HEADER: :file img/contour.eps :imagemagick yes
#+HEADER: :results output silent :headers '("\\usepackage{tikz}")
#+HEADER: :fit yes :imoutoptions -geometry 400 :iminoptions -density 600
#+BEGIN_src latex
\begin{tikzpicture}
\draw[->] (-3,0) -- (-2,0) arc[radius=0.5cm,start angle=-180,end angle=0] (-1,0) -- (1,0) arc[radius=0.5cm,start angle=180,end angle=0] (2,0) -- (3,0);
\filldraw (-1.5,0) circle[radius=1mm];
\filldraw (1.5,0) circle[radius=1mm];
\end{tikzpicture}
#+END_src

** TikZ and Org Mode - Work-around for Lack of Imagemagik

My workaround for for making TikZ graphics without imagemagik is to
write a LaTeX script in an Emacs Org mode (Python) code block. In this
code block, I form a =subprocess.Popen= object that creates a pipe to
LaTeX. The pipe is prepared so that I specify the LaTeX command as
well as an output file name. Then, I stream the LaTeX script through the
LaTeX pipe using the =subprocess.communicate= method. This allows
LaTeX (actually, PDFTeX, in my case) to process the commands in the
LaTeX script, although the script is never a file written to the file
space.

This is a powerful method that can be generalized to any
program available on your computer. In this way, you can stream MATLAB
scripts to MATLAB, or you can launch high-performance computing (HPC)
jobs by streaming a job submission script to a submission program,
such as =qsub=.

An example script is as follows:
#+name: script_tikz_four_dot_states
#+begin_src python :exports none :results none
'''
This Python script creates a stand-alone LaTeX figure.
'''
from pathlib import Path # for creating directories
import subprocess as sp # for running programs, making pipes
import os # file-system tools

homedir = os.getcwd()
targetdir = os.path.join(homedir, 'img')
# create the targetdir if it doesn't exist
Path(targetdir).mkdir(exist_ok=True)

jobname = 'basic_TikZ_fig' # output file name (no extension)
pdftex = '/Library/TeX/texbin/pdflatex' # path to my PDFTeX program

'''
Now, I define a LaTeX script. The Python string requires
me to use "\\" whenever I want "\" in the LaTeX script.

This script simply draws a square and then partitions it
into four smaller squares.
'''

tex_script = """\\documentclass{standalone}
\\usepackage{tikz, adjustbox}

\\begin{document}

\\begin{tikzpicture}[scale=0.825]
   \\draw (-1, -1) rectangle (1, 1);
   \\draw (0, -1) -- (0, 1);
   \\draw (-1, 0) -- (1, 0);
\\end{tikzpicture}

\\end{document}
#end"""

# Change directory to targetdir, run commands there
os.chdir(targetdir)

'''
   Form the PDFTeX pipe, p.

   We can think of the pipe as:
   {pdftex} -jobname=basic_TikZ_fig

   Here, {pdftex} is actually the full path to my PDFTeX program:
   '/Library/TeX/texbin/pdflatex', and -jobname=basic_TikZ_fig is a PDFTeX
   option that specifies the output file name (this option is particular to
   PDFTeX and may not apply if you are trying to generalize this technique
   to another program).

   Note that no input script is specified. We will stream the input script
   through our pipe (p) later, once p is defined. This will be done by
   invoking the p.communicate() method. If we stream the script to the
   pipe, there is no need to write it to the file system.
'''
cmdlist = [pdftex, f'-jobname={jobname}']
p = sp.Popen(cmdlist,
             stdin=sp.PIPE,
	         stdout=sp.PIPE,
	         stderr=sp.PIPE,
	         universal_newlines=True)

# run the script - capture the output and errors generated by PDFTeX,
#    even though I don't use them here.
out, err = p.communicate(tex_script)

# clean up - delete temporary files
ext_list = ('log', 'aux')
for ext in ext_list:
   os.remove( f'{jobname}.{ext}')
#+end_src


While I cannot convert my PDF to JPG or PNG without Imagemagik, I can
have TikZ scripts in my Org documents; and more powerfully, I can run
any script in an appropriate program from within a code block.


* Running an Arbitrary Program in a Python Code Block

** A MATLAB Example

Here's an example where I define and run a MATLAB script from a Python
code block.

If you want to run this on a Windows computer, you may have to set up
your computer using [[https://www.mathworks.com/matlabcentral/answers/102082-how-do-i-call-matlab-from-the-dos-prompt][these instructions]].

#+name: script_matlab_plot
#+begin_src python :results output :exports both
'''
This Python script creates a stand-alone LaTeX figure.
'''
from pathlib import Path # for creating directories
import subprocess as sp # for running programs, making pipes
import os # file-system tools

homedir = os.getcwd()
targetdir = os.path.join(homedir, 'img')
# create the targetdir if it doesn't exist
Path(targetdir).mkdir(exist_ok=True)

# Modify this to point to your MATLAB command
# For Windows, you might be able to just let mat_cmd = 'matlab'
#     but you'll probably have to apply/adapt the instructions found here:
#     https://www.mathworks.com/matlabcentral/answers/102082-how-do-i-call-matlab-from-the-dos-prompt
mat_cmd = '/Applications/MATLAB_R2020b.app/bin/matlab' # path to my PDFTeX program

'''
Now, I define a MATLAB script. 

This script simply plots a sine wave.
'''

mat_script = """x = linspace(0, 1, 101);
y = sin(2*pi*x);

plot(x, y, 'LineWidth', 2);
set(gca, 'FontSize', 20, 'FontName', 'Times')
grid on
xlabel('$x$', 'Interpreter', 'latex')
ylabel('$y$', 'Interpreter', 'latex')

print('sine_plot', '-djpeg')
"""

# Change directory to targetdir, run commands there
os.chdir(targetdir)

'''
   Form the PDFTeX pipe, p.

   We can think of the pipe as:
   {mat_cmd} -nosplash -nodesktop

   Here, {mat_cmd} is actually the full path to my MATLAB

   Note that no input script is specified. We will stream the input script
   through our pipe (p) later, once p is defined. This will be done by
   invoking the p.communicate() method. If we stream the script to the
   pipe, there is no need to write it to the file system.
'''
cmdlist = [mat_cmd,
           '-nosplash', # suppress the fancy splash graphic on MATLAB startup
           '-nodesktop'] # do not open a MATLAB Desktop interface

p = sp.Popen(cmdlist,
             stdin=sp.PIPE,
	     stdout=sp.PIPE,
	     stderr=sp.PIPE,
	     universal_newlines=True)

# run the script - capture the output and errors generated by PDFTeX,
#    even though I don't use them here.
out, err = p.communicate(mat_script)

print('\nCommand output:')
print(out) # display the output
print('\nError text:')
print(err) # display any error messages captured
#+end_src

#+RESULTS: script_matlab_plot
#+begin_example

Command output:

                                                                              < M A T L A B (R) >
                                                                    Copyright 1984-2020 The MathWorks, Inc.
                                                                R2020b Update 1 (9.9.0.1495850) 64-bit (maci64)
                                                                               September 30, 2020

 
To get started, type doc.
For product information, visit www.mathworks.com.
 
>> >> >> >> >> >> >> >> >> >> >> 

Error text:
2021-01-06 09:27:31.631 MATLAB_maci64[21972:79801] CoreText note: Client requested name ".SFNS-Regular", it will get Times-Roman rather than the intended font. All system UI font access should be through proper APIs such as CTFontCreateUIFontForLanguage() or +[NSFont systemFontOfSize:].
2021-01-06 09:27:31.631 MATLAB_maci64[21972:79801] CoreText note: Set a breakpoint on CTFontLogSystemFontNameRequest to debug.
2021-01-06 09:27:31.632 MATLAB_maci64[21972:79801] CoreText note: Client requested name ".SFNS-Bold", it will get Times-Roman rather than the intended font. All system UI font access should be through proper APIs such as CTFontCreateUIFontForLanguage() or +[NSFont systemFontOfSize:].
2021-01-06 09:27:31.633 MATLAB_maci64[21972:79801] CoreText note: Client requested name ".SFNSMono-Regular", it will get Times-Roman rather than the intended font. All system UI font access should be through proper APIs such as CTFontCreateUIFontForLanguage() or +[NSFont systemFontOfSize:].
2021-01-06 09:27:31.636 MATLAB_maci64[21972:79801] CoreText note: Client requested name ".SFNSMono-Regular", it will get Times-Roman rather than the intended font. All system UI font access should be through proper APIs such as CTFontCreateUIFontForLanguage() or +[NSFont systemFontOfSize:].
2021-01-06 09:27:31.636 MATLAB_maci64[21972:79801] CoreText note: Client requested name ".SFNSMono-Regular", it will get Times-Roman rather than the intended font. All system UI font access should be through proper APIs such as CTFontCreateUIFontForLanguage() or +[NSFont systemFontOfSize:].
2021-01-06 09:27:31.638 MATLAB_maci64[21972:79801] CoreText note: Client requested name ".SFNS-Regular", it will get Times-Roman rather than the intended font. All system UI font access should be through proper APIs such as CTFontCreateUIFontForLanguage() or +[NSFont systemFontOfSize:].
2021-01-06 09:27:31.638 MATLAB_maci64[21972:79801] CoreText note: Client requested name ".SFNS-Bold", it will get Times-Roman rather than the intended font. All system UI font access should be through proper APIs such as CTFontCreateUIFontForLanguage() or +[NSFont systemFontOfSize:].

#+end_example

The resulting jpg can be viewed:
[[./img/sine_plot.jpg]]


** Phone Interview
4 Full/10 Assoc/2 Tenure track


*** Assoc. Prof Dan Opila

*** 
- Hiring Timeline?
  - Virtual on campus
    - Hear by the end of january
  - Mid-late March
